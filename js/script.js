"use strict"

//=============================================================================================================================================================================================
// JSON это штукенция, которая нужна для того что бы мы могли упаковать объект из JS и заслать заслать его куда нам нужно. 
// Буквально JSON это формат конвертации. Метод JSON.stringify(obj, replacer, space) сворачивает объект obj в строку, в случае если задан аргумент replacer,
// мы можем сразу отсортировать некорректные значения, а аргумент space настраивает количество пробелов в форматировании объекта. JSON.stringify может прожевать 1) Объекты
// ОТЛИЧИЯ от обычного объекта 1) Имена свойств тоже в кавычках.																								 2) Массивы
//							   2) Кавычки ТОЛЬКО двойные.																										 3) Строки
//							   3) Запрещены цикличные ссылки (когда одно свойство объекта ссылается на другое.)													 4) Числа
//							   4) Символьные свойства, пустые свойства, свойства-функции при стрингификации в JSON игнорируются.								 5) Логические значения
//							   5) Вложенные объекы поддерживаются и отлично конвертируются																		 6) null
// TO LEARN: Прикольно, получается JSONом можно делать глубокое копирование объектов?

//===========================================TASKS=============================================================================================================================================
let user = {
			name: "Василий Иванович",
			age: 35
};
console.log(user);
let json = JSON.stringify(user);
console.log(json);
let obj = JSON.parse(json);
console.log(obj);



//=============================================================================================================================================================================================
let room = {
	number: 23
};

let meetup = {
	title: "Совещание",
	occupiedBy: [{name: "Иванов"}, {name: "Петров"}],
	place: room
};

room.occupiedBy = meetup;
meetup.self = meetup;

console.log( JSON.stringify(meetup, function replacer(key, value) {
		console.log( value );
		return (key !=='' && value == meetup) ? undefined : value;
	}
));


//не прям до конца понял, но вроде функция replacer вызывает первым делом пустой ключ, со значением в виде исходного объекта.
//кажется это нужно, что бы при определенных условиях функиция могла заигнорить || заменить весь объект сразу.
//суть реплейсера именно здесь, это проверка? не ведет ли свойство в каждом ключе обратно в объект meetup/
//если мы не отбросим первое значение с пустым ключом, то вместо всего объектf нам вернется undefined и стринговать нам будет просто нечего.