"use strict"

// Чет прям ну очень сложно, методом тыка вроде что то получается, но как работает под капотом не пойму.
// Пока похоже, что мы можем просто объявить пустую функцию, и дальше тупо работать с ней как с объектом.
// TODO: Я в упор не понимаю, в какой жопе это все хранится?
// Кажется понемногу доходит.

//=============================TASKS=================================================================================================================================================
console.log('==================NEXT TASK====================');

function makeCounter() { //Это функция для создания других функций. Если не ошибаюсь то это функция конструктор.

	let count = 0;

	function cntr() {}; // Нам нужно просто создать какую то функцию что бы было что возвращать конструктору, что бы было что привязать к переменной, и что бы было к чему наваливать методы.

	cntr.number = 0; // Пока не нужно, переписал все на замыкание, пусть висит.
					// Используем свойство функции-объекта как хранилище значения счетчика, потому что если хранить в замыкании, тоя не могу понять как потом вывести значение в консоль,
					// т.к. по идее замыкания, к нему нет доступа ничему и ниоткуда, кроме той функции с которой это значение замкнуто. То есть я в общем то смогу инкрементить его, но не могу посмотреть.
					// TODO: а если создать в замыкании метод, который будет выводить значение в консоль?
					// ооо, кажись работает.

	cntr.tick = () => count++; //Наваливаем метод, который будет инкрементить
	cntr.set = (value) => count = value; //Метод, который будет присваивать счетчику указанное значение
	cntr.decrease = () => count--; //Метод будет декрементить
	cntr.show = () => console.log(count); // Метод что бы посмотреть "шотамвзамыкании"
	cntr.get = () => count; // Что бы выковырнуть значение из замыкания. В общем то получается, что метод .show не нужен, но пусть пока остается.

	return cntr;
};


let counter = makeCounter();
console.log(counter);

counter.tick();
counter.tick();
counter.tick();
console.log(counter.tick);
counter.show();

counter.set(200);
counter.show();


counter.tick();
counter.tick();
counter.tick();
let counterVal = counter.get();
console.log(counterVal);

//console.log(counter.number);
//console.log(counter.number);



//=============================TASKS=================================================================================================================================================
console.log('==================NEXT TASK====================');




